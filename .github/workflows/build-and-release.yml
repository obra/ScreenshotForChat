name: Build and Release macOS App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  build:
    runs-on: macos-14
    permissions:
      contents: write  # Required for creating releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
        
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
        
    - name: Install dependencies
      run: |
        # Install create-dmg for DMG creation
        brew install create-dmg
        
    - name: Setup signing certificates
      env:
        DEVELOPER_ID_APPLICATION: ${{ secrets.DEVELOPER_ID_APPLICATION }}
        DEVELOPER_ID_APPLICATION_PASSWORD: ${{ secrets.DEVELOPER_ID_APPLICATION_PASSWORD }}
        DEVELOPER_ID_INSTALLER: ${{ secrets.DEVELOPER_ID_INSTALLER }}
        DEVELOPER_ID_INSTALLER_PASSWORD: ${{ secrets.DEVELOPER_ID_INSTALLER_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "$RUNNER_TEMP" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$RUNNER_TEMP" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import Developer ID Application certificate
        echo "$DEVELOPER_ID_APPLICATION" | base64 --decode > cert.p12
        security import cert.p12 -k build.keychain -P "$DEVELOPER_ID_APPLICATION_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
        rm cert.p12
        
        # Import Developer ID Installer certificate (for DMG signing)
        echo "$DEVELOPER_ID_INSTALLER" | base64 --decode > installer.p12
        security import installer.p12 -k build.keychain -P "$DEVELOPER_ID_INSTALLER_PASSWORD" -T /usr/bin/productbuild -T /usr/bin/security
        rm installer.p12
        
        # Allow codesign to access the keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "$RUNNER_TEMP" build.keychain
        
    - name: Build Swift package
      run: |
        swift build --configuration release --arch arm64 --arch x86_64
        
    - name: Create app bundle structure (improved)
      run: |
        APP_NAME="ScreenshotForChat"
        APP_BUNDLE="$APP_NAME.app"
        
        # Remove any existing bundle
        rm -rf "$APP_BUNDLE"
        
        # Create bundle directories
        mkdir -p "$APP_BUNDLE/Contents/MacOS"
        mkdir -p "$APP_BUNDLE/Contents/Resources"
        
        # Copy executable
        cp .build/apple/Products/Release/$APP_NAME "$APP_BUNDLE/Contents/MacOS/"
        
        # Copy Swift package dependency bundles with correct structure
        # Resource bundles need minimal Info.plist, not the executable bundle version
        for arch_dir in .build/*-apple-macosx/release; do
          if [ -d "$arch_dir" ]; then
            echo "Copying bundles from architecture directory: $arch_dir"
            find "$arch_dir" -name "*.bundle" -type d | while read bundle; do
              bundle_name=$(basename "$bundle")
              echo "Copying resource bundle: $bundle"
              # Only copy if we haven't copied this bundle yet (avoid duplicates)
              if [ ! -d "$APP_BUNDLE/Contents/$bundle_name" ]; then
                cp -R "$bundle" "$APP_BUNDLE/Contents/"
                # Fix permissions
                find "$APP_BUNDLE/Contents/$bundle_name" -type f -exec chmod 644 {} \;
              else
                echo "Bundle $bundle_name already copied, skipping"
              fi
            done
            break  # Only need bundles from one architecture
          fi
        done
        
        # Create Info.plist
        cat > "$APP_BUNDLE/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDisplayName</key>
            <string>Screenshot for Chat</string>
            <key>CFBundleExecutable</key>
            <string>ScreenshotForChat</string>
            <key>CFBundleIdentifier</key>
            <string>com.fsck.screenshotforchat</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>Screenshot for Chat</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ github.event.inputs.version || github.ref_name }}</string>
            <key>CFBundleVersion</key>
            <string>${{ github.run_number }}</string>
            <key>CFBundleIconFile</key>
            <string>ScreenshotForChat</string>
            <key>LSMinimumSystemVersion</key>
            <string>14.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHumanReadableCopyright</key>
            <string>Copyright 2025 Jesse Vincent</string>
        </dict>
        </plist>
        EOF
        
        # Copy resources
        if [ -d "Resources" ]; then
          cp -R Resources/* "$APP_BUNDLE/Contents/Resources/" 2>/dev/null || true
        fi
        
    - name: Sign app bundle (improved)
      env:
        DEVELOPER_ID_NAME: ${{ secrets.DEVELOPER_ID_NAME }}
      run: |
        APP_BUNDLE="ScreenshotForChat.app"
        
        echo "üîê Signing app bundle components..."
        
        # Sign dependency bundles first (inside-out signing)
        find "$APP_BUNDLE/Contents" -name "*.bundle" -type d | while read bundle; do
          echo "Signing bundle: $bundle"
          codesign --force --options runtime --sign "$DEVELOPER_ID_NAME" "$bundle"
        done
        
        # Sign the main executable
        echo "Signing main executable..."
        codesign --force --options runtime --sign "$DEVELOPER_ID_NAME" "$APP_BUNDLE/Contents/MacOS/ScreenshotForChat"
        
        # Sign the app bundle itself (outermost)
        echo "Signing app bundle..."
        codesign --force --options runtime --sign "$DEVELOPER_ID_NAME" "$APP_BUNDLE"
        
        # Verify signature
        echo "Verifying signatures..."
        codesign --verify --verbose=4 "$APP_BUNDLE"
        
        # Check Gatekeeper status (expected to fail before notarization)
        echo "Checking Gatekeeper status (expected to be rejected before notarization):"
        spctl --assess --verbose "$APP_BUNDLE" || echo "‚úì App rejected as expected - will be resolved by notarization"
        
    - name: Create DMG
      run: |
        APP_NAME="ScreenshotForChat"
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        DMG_NAME="${APP_NAME}-${VERSION}.dmg"
        
        create-dmg \
          --volname "$APP_NAME" \
          --volicon "Resources/ScreenshotForChat.icns" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "$APP_NAME.app" 200 190 \
          --hide-extension "$APP_NAME.app" \
          --app-drop-link 600 185 \
          --hdiutil-quiet \
          "$DMG_NAME" \
          "$APP_NAME.app" || true
          
        # If create-dmg fails, create a simple DMG
        if [ ! -f "$DMG_NAME" ]; then
          echo "create-dmg failed, creating simple DMG"
          hdiutil create -srcfolder "$APP_NAME.app" -volname "$APP_NAME" "$DMG_NAME"
        fi
        
    - name: Sign DMG
      env:
        DEVELOPER_ID_NAME: ${{ secrets.DEVELOPER_ID_NAME }}
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        DMG_NAME="ScreenshotForChat-${VERSION}.dmg"
        
        # Sign the DMG
        codesign --force --sign "$DEVELOPER_ID_NAME" "$DMG_NAME"
        
        # Verify DMG signature
        codesign --verify --verbose "$DMG_NAME"
        
    - name: Notarize app
      env:  
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        DMG_NAME="ScreenshotForChat-${VERSION}.dmg"
        
        # Submit for notarization
        xcrun notarytool submit "$DMG_NAME" \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --wait
          
        # Staple the notarization
        xcrun stapler staple "$DMG_NAME"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ScreenshotForChat-${{ github.event.inputs.version || github.ref_name }}
        path: |
          ScreenshotForChat-*.dmg
          ScreenshotForChat.app
          
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        DMG_NAME="ScreenshotForChat-${VERSION}.dmg"
        
        # Create release using GitHub CLI
        gh release create "${{ github.ref_name }}" \
          "$DMG_NAME" \
          --title "Screenshot for Chat ${{ github.ref_name }}" \
          --generate-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true